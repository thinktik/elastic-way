plugins {
    id 'java'
    id 'maven-publish'
}

group 'cc.omoz'
version '1.1-SNAPSHOT'


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

// -----------------------------------    gradle打包    ----------------------------------------------------------------
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    all {
        // https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
        resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

// 附带源代码
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

// 编译
compileJava {
    // 源代码兼容版本
    sourceCompatibility = 17
    // 字节码兼容版本
    targetCompatibility = 17
    // 字符编码
    options.encoding = 'UTF-8'
}

// 打包
jar {
    // 打包时不附带plain.jar,只打包fatjar
    // https://stackoverflow.com/questions/67663728/spring-boot-2-5-0-generates-plain-jar-file-can-i-remove-it
    enabled = true
    //use empty string
    archiveClassifier = ''
}

// -----------------------------------NEXUS 包管理仓库设置----------------------------------------------------------------

// 从Nexus下载依赖
repositories {
    // 优先使用本地仓库
    mavenLocal()
    // 第二优先使用私有仓库
    maven {
        // 用户口令
        credentials {
            username '_developer'
            password 'xxxxxoud2018'
        }
        // public仓库地址,包含release和snapshots
        url = "https://www.nexus.xxxxxjd.net/repository/maven-public/"
    }
    // Spring
    maven { url 'https://repo.spring.io/release' }
    // 最后使用私有仓库
    mavenCentral()
}

// 发布到Nexus私有库
publishing {
    publications {
        mavenJava(MavenPublication) {
            // 包含打包出的jar包
            from components.java
            // 包含源代码
            artifact sourceJar
        }
    }

    repositories {
        maven {
            // 用户口令
            credentials {
                username 'xxxxx_developer'
                password 'xxxxxoud2018'
            }
            // release仓库地址
            def releasesRepoUrl = "https://www.nexus.xxxxxjd.net/repository/maven-releases/"
            // snapshots仓库地址
            def snapshotsRepoUrl = "https://www.nexus.xxxxxjd.net/repository/maven-snapshots/"
            // 根据版本信息动态判断发布到snapshots还是release仓库
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            // 禁用使用非安全协议通信(比如http)
            allowInsecureProtocol false
        }
    }
}